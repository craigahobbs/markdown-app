# Licensed under the MIT License
# https://github.com/craigahobbs/markdown-up/blob/main/LICENSE


# Include sentinel
if systemGlobalGet('unittestTests'):
    return
endif


# Test statistics
unittestTests = objectNew()
unittestWarnings = arrayNew()


# $function: unittestRunTest
# $group: unittest
# $doc: Run a unit test
# $arg testName: The test function name
function unittestRunTest(testName):
    testFn = unittestRunTestHelper(testName)
    if testFn:
        testFn()
        systemGlobalSet('unittestTestName', null)
    endif
endfunction


# $function: unittestRunTestAsync
# $group: unittest
# $doc: Run an asyncronous unit test
# $arg testName: The test function name
async function unittestRunTestAsync(testName):
    testFn = unittestRunTestHelper(testName)
    if testFn:
        testFn()
        systemGlobalSet('unittestTestName', null)
    endif
endfunction


# unittestRunTest helper function
function unittestRunTestHelper(testName):
    # Single test argument?
    if vTest != null && vTest != testName:
        return null
    endif

    # Test run multiple times?
    if objectHas(unittestTests, testName):
        arrayPush(unittestWarnings, 'Test "' + testName + '" run multiple times')
        return null
    endif

    # Get the test func
    testFn = systemGlobalGet(testName)
    if testFn == null:
        arrayPush(unittestWarnings, 'Test "' + testName + '" not found')
        return null
    endif

    # Add the unit test result array
    testFailures = arrayNew()
    objectSet(unittestTests, testName, testFailures)
    systemGlobalSet('unittestTestName', testName)

    return testFn
endfunction


# $function: unittestReport
# $group: unittest
# $doc: Render the unit test report
function unittestReport():
    # Compute test statistics
    testNames = arraySort(objectKeys(unittestTests))
    testCount = arrayLength(testNames)
    testFailCount = 0
    for testName in testNames:
        testFailures = objectGet(systemGlobalGet('unittestTests'), testName)
        if arrayLength(testFailures):
            testFailCount = testFailCount + 1
        endif
    endfor
    testPassCount = testCount - testFailCount

    # Report statistics
    markdownPrint( \
        'Ran ' + testCount + ' tests - ' + testPassCount + ' passed, ' + testFailCount + ' failed' \
    )

    # Report any warnings
    if arrayLength(unittestWarnings):
        markdownPrint('', '## Warnings')
        for warning in unittestWarnings:
            markdownPrint('', '- ' + markdownEscape(warning))
        endfor
    endif

    # Report the failing tests
    if testFailCount:
        markdownPrint('', '## Failing Tests')
        for testName in testNames:
            testFailures = objectGet(systemGlobalGet('unittestTests'), testName)
            if arrayLength(testFailures):
                markdownPrint('', '[' + markdownEscape(testName) + "](#var.vTest='" + urlEncodeComponent(testName) + "') - FAIL")
                for error in testFailures:
                    markdownPrint('', '- ' + markdownEscape(error))
                endfor
            endif
        endfor
    endif

    # Report the failing tests
    if testPassCount:
        markdownPrint('', '## Passing Tests')
        for testName in testNames:
            testFailures = objectGet(systemGlobalGet('unittestTests'), testName)
            if !arrayLength(testFailures):
                markdownPrint('', '[' + markdownEscape(testName) + "](#var.vTest='" + urlEncodeComponent(testName) + "') - OK")
            endif
        endfor
    endif
endfunction


# $function: unittestReset
# $group: unittest
# $doc: Reset the unit test data
function unittestReset():
    systemGlobalSet('unittestTests', objectNew())
    systemGlobalSet('unittestWarnings', arrayNew())
endfunction


# $function: unittestEquals
# $group: unittest
# $doc: Assert an actual value is equal to the expected value
# $arg actual: The actual value
# $arg expected: The expected value
# $arg description: The description of the assertion
function unittestEquals(actual, expected, description):
    if actual != expected:
        unittestRecordError(jsonStringify(actual), jsonStringify(expected), description)
    endif
endfunction


# $function: unittestDeepEquals
# $group: unittest
# $doc: Assert an actual value is *deeply* equal to the expected value
# $arg actual: The actual value
# $arg expected: The expected value
# $arg description: The description of the assertion
function unittestDeepEquals(actual, expected, description):
    actualJSON = jsonStringify(actual)
    expectedJSON = jsonStringify(expected)
    if actualJSON != expectedJSON:
        unittestRecordError(actualJSON, expectedJSON, description)
    endif
endfunction


# Helper function to record a unit test error
function unittestRecordError(actualStr, expectedStr, description):
    testName = systemGlobalGet('unittestTestName')
    testFailures = objectGet(systemGlobalGet('unittestTests'), testName)
    arrayPush(testFailures, if(description != null, description + ' - ', '') + actualStr + ' != ' + expectedStr)
endfunction
