{
    "functions": [
        {
            "name": "formsLinkButtonElements",
            "group": "forms.mds",
            "doc": [
                "Create a link button [element model](https://github.com/craigahobbs/element-model#readme)"
            ],
            "args": [
                {
                    "name": "text",
                    "doc": [
                        "The link button's text"
                    ]
                },
                {
                    "name": "onClick",
                    "doc": [
                        "The link button's click event handler"
                    ]
                }
            ],
            "return": [
                "The link button [element model](https://github.com/craigahobbs/element-model#readme)"
            ]
        },
        {
            "name": "formsLinkElements",
            "group": "forms.mds",
            "doc": [
                "Create a link [element model](https://github.com/craigahobbs/element-model#readme)"
            ],
            "args": [
                {
                    "name": "text",
                    "doc": [
                        "The link's text"
                    ]
                },
                {
                    "name": "url",
                    "doc": [
                        "The link's URL. If null, the link is rendered as text."
                    ]
                }
            ],
            "return": [
                "The link [element model](https://github.com/craigahobbs/element-model#readme)"
            ]
        },
        {
            "name": "formsTextElements",
            "group": "forms.mds",
            "doc": [
                "Create a text input [element model](https://github.com/craigahobbs/element-model#readme)"
            ],
            "args": [
                {
                    "name": "id",
                    "doc": [
                        "The text input element ID"
                    ]
                },
                {
                    "name": "text",
                    "doc": [
                        "The initial text of the text input element"
                    ]
                },
                {
                    "name": "size",
                    "doc": [
                        "Optional (default is null). The size, in characters, of the text input element"
                    ]
                },
                {
                    "name": "onEnter",
                    "doc": [
                        "Optional (default is null). The text input element on-enter event handler"
                    ]
                }
            ],
            "return": [
                "The text input [element model](https://github.com/craigahobbs/element-model#readme)"
            ]
        },
        {
            "name": "unittestDeepEquals",
            "group": "unittest.mds",
            "doc": [
                "Assert an actual value is *deeply* equal to the expected value"
            ],
            "args": [
                {
                    "name": "actual",
                    "doc": [
                        "The actual value"
                    ]
                },
                {
                    "name": "expected",
                    "doc": [
                        "The expected value"
                    ]
                },
                {
                    "name": "description",
                    "doc": [
                        "The description of the assertion"
                    ]
                }
            ]
        },
        {
            "name": "unittestEquals",
            "group": "unittest.mds",
            "doc": [
                "Assert an actual value is equal to the expected value"
            ],
            "args": [
                {
                    "name": "actual",
                    "doc": [
                        "The actual value"
                    ]
                },
                {
                    "name": "expected",
                    "doc": [
                        "The expected value"
                    ]
                },
                {
                    "name": "description",
                    "doc": [
                        "The description of the assertion"
                    ]
                }
            ]
        },
        {
            "name": "unittestMockBegin",
            "group": "unittestMock.mds",
            "doc": [
                "Start a generic function mock",
                "To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."
            ],
            "args": [
                {
                    "name": "funcName",
                    "doc": [
                        "The name of the function to mock"
                    ]
                }
            ]
        },
        {
            "name": "unittestMockBegin_markdownPrint",
            "group": "unittestMock.mds",
            "doc": [
                "Begin mocking the MarkdownUp library's [markdownPrint](./#var.vGroup='Markdown'&markdownprint) function.",
                "To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."
            ]
        },
        {
            "name": "unittestMockBegin_systemFetch",
            "group": "unittestMock.mds",
            "doc": [
                "Begin mocking the MarkdownUp library's [systemFetch](./#var.vGroup='System'&systemfetch) function.",
                "To stop mocking, call the [unittestMockEnd_systemFetch](#var.vGroup='unittestMock.mds'&unittestmockend-systemfetch) function."
            ],
            "args": [
                {
                    "name": "responses",
                    "doc": [
                        "The map of URL to response"
                    ]
                }
            ]
        },
        {
            "name": "unittestMockBegin_systemLog",
            "group": "unittestMock.mds",
            "doc": [
                "Begin mocking the MarkdownUp library's [systemLog](./#var.vGroup='System'&systemlog) function.",
                "To stop mocking, call the [unittestMockEnd_systemLog](#var.vGroup='unittestMock.mds'&unittestmockend-systemlog) function."
            ]
        },
        {
            "name": "unittestMockEnd",
            "group": "unittestMock.mds",
            "doc": [
                "Stop all generic function mocks"
            ],
            "return": [
                "The object of function name to function arguments"
            ]
        },
        {
            "name": "unittestReport",
            "group": "unittest.mds",
            "doc": [
                "Render the unit test report"
            ],
            "return": [
                "The number of unit test failures"
            ]
        },
        {
            "name": "unittestReset",
            "group": "unittest.mds",
            "doc": [
                "Reset the unit test data"
            ]
        },
        {
            "name": "unittestRunTest",
            "group": "unittest.mds",
            "doc": [
                "Run a unit test"
            ],
            "args": [
                {
                    "name": "testName",
                    "doc": [
                        "The test function name"
                    ]
                }
            ]
        },
        {
            "name": "unittestRunTestAsync",
            "group": "unittest.mds",
            "doc": [
                "Run an asyncronous unit test"
            ],
            "args": [
                {
                    "name": "testName",
                    "doc": [
                        "The test function name"
                    ]
                }
            ]
        }
    ]
}
