{"functions":[{"name":"argsHelp","group":"args.mds","doc":["Output the [arguments model's](includeModel.html#var.vName='ArgsArguments') help"],"args":[{"name":"arguments","doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"]}]},{"name":"argsLink","group":"args.mds","doc":["Create a Markdown link text to a MarkdownUp application URL"],"args":[{"name":"arguments","doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"]},{"name":"text","doc":["The link text"]},{"name":"args","doc":["Optional (default is null). The arguments object."]},{"name":"explicit","doc":["Optional (default is false). If true, arguments are only included in the URL if they are in the arguments object."]},{"name":"headerText","doc":["Optional (default is null). If non-null, the URL's header text.","The special \"_top\" header ID scrolls to the top of the page."]},{"name":"url","doc":["Optional (default is null). If non-null, the MarkdownUp URL hash parameter."]}],"return":["The Markdown link text"]},{"name":"argsParse","group":"args.mds","doc":["Parse an [arguments model](includeModel.html#var.vName='ArgsArguments').","Argument globals are validated and added to the arguments object using the argument name."],"args":[{"name":"arguments","doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"]}],"return":["The arguments object"]},{"name":"argsURL","group":"args.mds","doc":["Create a MarkdownUp application URL"],"args":[{"name":"arguments","doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"]},{"name":"args","doc":["Optional (default is null). The arguments object. Null argument values are excluded from the URL."]},{"name":"explicit","doc":["Optional (default is false). If true, arguments are only included in the URL if they are in the arguments object."]},{"name":"headerText","doc":["Optional (default is null). If non-null, the URL's header text.","The special \"_top\" header ID scrolls to the top of the page."]},{"name":"url","doc":["Optional (default is null). If non-null, the MarkdownUp URL hash parameter."]}],"return":["The MarkdownUp application URL"]},{"name":"argsValidate","group":"args.mds","doc":["Validate an arguments model"],"args":[{"name":"arguments","doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"]}],"return":["The validated [arguments model](includeModel.html#var.vName='ArgsArguments') or null if validation fails"]},{"name":"formsLinkButtonElements","group":"forms.mds","doc":["Create a link button [element model](https://github.com/craigahobbs/element-model#readme)"],"args":[{"name":"text","doc":["The link button's text"]},{"name":"onClick","doc":["The link button's click event handler"]}],"return":["The link button [element model](https://github.com/craigahobbs/element-model#readme)"]},{"name":"formsLinkElements","group":"forms.mds","doc":["Create a link [element model](https://github.com/craigahobbs/element-model#readme)"],"args":[{"name":"text","doc":["The link's text"]},{"name":"url","doc":["The link's URL. If null, the link is rendered as text."]}],"return":["The link [element model](https://github.com/craigahobbs/element-model#readme)"]},{"name":"formsTextElements","group":"forms.mds","doc":["Create a text input [element model](https://github.com/craigahobbs/element-model#readme)"],"args":[{"name":"id","doc":["The text input element ID"]},{"name":"text","doc":["The initial text of the text input element"]},{"name":"size","doc":["Optional (default is null). The size, in characters, of the text input element"]},{"name":"onEnter","doc":["Optional (default is null). The text input element on-enter event handler"]}],"return":["The text input [element model](https://github.com/craigahobbs/element-model#readme)"]},{"name":"pagerMain","group":"pager.mds","doc":["The pager application main entry point"],"args":[{"name":"pagerModel","doc":["The [pager model](includeModel.html#var.vName='Pager')"]},{"name":"options","doc":["The pager application options. The following options are available:","- **arguments** - The [arguments model](includeModel.html#var.vName='ArgsArguments').","  Must contain a string argument named \"page\".","- **hideMenu** - Hide the menu links","- **hideNav** - Hide the navigation links","- **start** - The start page name"]}]},{"name":"pagerValidate","group":"pager.mds","doc":["Validate a pager model"],"args":[{"name":"pagerModel","doc":["The [pager model](includeModel.html#var.vName='Pager')"]}],"return":["The validated [pager model](includeModel.html#var.vName='Pager') or null if validation fails"]},{"name":"unittestDeepEqual","group":"unittest.mds","doc":["Assert an actual value is *deeply* equal to the expected value"],"args":[{"name":"actual","doc":["The actual value"]},{"name":"expected","doc":["The expected value"]},{"name":"description","doc":["The description of the assertion"]}]},{"name":"unittestEqual","group":"unittest.mds","doc":["Assert an actual value is equal to the expected value"],"args":[{"name":"actual","doc":["The actual value"]},{"name":"expected","doc":["The expected value"]},{"name":"description","doc":["The description of the assertion"]}]},{"name":"unittestMockAll","group":"unittestMock.mds","doc":["Start mocking all BareScript and MarkdownUp library functions with externalities.","To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."],"args":[{"name":"data","doc":["Optional (default is null). The map of function name to mock function data.","The following functions make use of mock data:","- **documentInputValue** - map of id to return value","- **markdownParse** - array of return values","- **markdownTitle** - array of return values","- **systemFetch** - map of URL to response text"]}]},{"name":"unittestMockEnd","group":"unittestMock.mds","doc":["Stop all function mocks"],"return":["The array of mock function call tuples of the form (function name, function argument array)"]},{"name":"unittestMockOne","group":"unittestMock.mds","doc":["Start a function mock.","To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."],"args":[{"name":"funcName","doc":["The name of the function to mock"]},{"name":"mockFunc","doc":["The mock function"]}]},{"name":"unittestMockOneGeneric","group":"unittestMock.mds","doc":["Start a generic function mock.","To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."],"args":[{"name":"funcName","doc":["The name of the function to mock"]}]},{"name":"unittestReport","group":"unittest.mds","doc":["Render the unit test report"],"return":["The number of unit test failures"]},{"name":"unittestRunTest","group":"unittest.mds","doc":["Run a unit test"],"args":[{"name":"testName","doc":["The test function name"]}]},{"name":"unittestRunTestAsync","group":"unittest.mds","doc":["Run an asyncronous unit test"],"args":[{"name":"testName","doc":["The test function name"]}]}]}
