# Licensed under the MIT License
# https://github.com/craigahobbs/markdown-up/blob/main/LICENSE


# Include sentinel
if systemGlobalGet('argsTypes'):
    return
endif


# The URL arguments model
argsTypes = schemaParse( \
    'group "Args"', \
    '', \
    '# An argument model list', \
    'typedef ArgsArgument[len > 0] ArgsArguments', \
    '', \
    '# An argument model', \
    'struct ArgsArgument', \
    '', \
    '    # The argument name', \
    '    string(len > 0) name', \
    '', \
    '    # The argument type', \
    '    optional ArgsType type', \
    '', \
    "    # The argument's global variable name", \
    '    optional string(len > 0) global', \
    '', \
    '    # If true, the argument is explicit.', \
    '    # An explicit argument is only included in the URL if it is explicitly set in the arguments dictionary.', \
    '    optional bool explicit', \
    '', \
    '    # The default argument value', \
    '    optional object default', \
    '', \
    '    # The argument description', \
    '    optional string(len > 0) description', \
    '', \
    '# An argument value type', \
    'enum ArgsType', \
    '    boolean', \
    '    date', \
    '    datetime', \
    '    number', \
    '    string' \
)


function argsGet(arguments):
    # Validate the URL args
    arguments = schemaValidate(argsTypes, 'ArgsArguments', arguments)
    if arguments == null:
        return null
    endif

    # Create the arguments object
    args = objectNew()
    for argument in arguments:
        # Get the argument value
        global = argsGlobalName(argument)
        value = argsValidateValue(systemGlobalGet(global), objectGet(argument, 'type'), global)

        # Apply the default argument value, if any
        if value == null:
            value = objectGet(argument, 'default')
        endif

        # Set the argument value, if any
        if value != null:
            objectSet(args, objectGet(argument, 'name'), value)
        endif
    endfor

    return args
endfunction


function argsURL(arguments, args, explicit):
    # Validate the URL args
    arguments = schemaValidate(argsTypes, 'ArgsArguments', arguments)
    if arguments == null:
        return null
    endif

    # Get the URL variables
    urlVars = arrayNew()
    for argument in arguments:
        name = objectGet(argument, 'name')
        type = objectGet(argument, 'type')
        global = argsGlobalName(argument)

        # Add the URL variable, if any
        value = null
        if objectHas(args, name):
            value = argsValidateValue(objectGet(args, name), type, global)
        elif !(explicit || objectGet(argument, 'explicit')):
            value = argsValidateValue(systemGlobalGet(global), type, global)
        endif

        # Add the URL variable
        if value != null:
            arrayPush(urlVars, 'var.' + global + '=' + urlEncodeComponent(argsFormatValue(value, type)))
        endif
    endfor

    # Create the URL
    return if(arrayLength(urlVars), '#' + arrayJoin(urlVars, '&'), '#var=')
endfunction


function argsLink(arguments, text, args, explicit):
    return '[' + markdownEscape(text) + '](' + argsURL(arguments, args, explicit) + ')'
endfunction


function argsHelp(arguments):
    # Validate the URL args
    arguments = schemaValidate(argsTypes, 'ArgsArguments', arguments)
    if arguments == null:
        return null
    endif

    # Create the help data
    helpData = arrayNew()
    anyDefault = false
    anyExplicit = false
    anyDescription = false
    for argument in arguments:
        type = objectGet(argument, 'type', 'string')
        default = objectGet(argument, 'default')
        explicit = objectGet(argument, 'explicit')
        description = objectGet(argument, 'description')

        # Add the help data row
        arrayPush(helpData, objectNew( \
            'Variable', argsGlobalName(argument), \
            'Type', type, \
            'Default', argsFormatValue(default, type), \
            'Explicit', argsFormatValue(explicit, 'boolean'), \
            'Description', if(description != null, description, '') \
        ))

        # Update the "any" field bools
        anyDefault = defaultAny || (default != null)
        anyExplicit = anyExplicit || explicit
        anyDescription = anyDescription || (description != null)
    endfor

    # Render the help table
    helpFields = arrayNew('Variable', 'Type')
    if anyDefault:
        arrayPush(helpFields, 'Default')
    endif
    if anyExplicit:
        arrayPush(helpFields, 'Explicit')
    endif
    if anyDescription:
        arrayPush(helpFields, 'Description')
    endif
    dataTable(helpData, objectNew('fields', helpFields))
endfunction


# Helper function to compute an argument's global name
function argsGlobalName(argument):
    global = objectGet(argument, 'global')
    if global == null:
        name = objectGet(argument, 'name')
        global = 'v' + stringUpper(stringSlice(name, 0, 1)) + stringSlice(name, 1)
    endif
    return global
endfunction


# Helper function to format an argument value
function argsFormatValue(value, type):
    # No value?
    if value == null:
        return ''
    endif

    # Return the formatted value
    if type == 'boolean':
        return stringNew(value)
    elif type == 'date':
        return "'" + datetimeISOFormat(value, true) + "'"
    elif type == 'datetime':
        return "'" + datetimeISOFormat(value) + "'"
    elif type == 'number':
        return stringNew(value)
    endif

    # type == 'string'
    return "'" + value + "'"
endfunction


# Helper function to validate an argument value's type
function argsValidateValue(value, type, global):
    # No value?
    if value == null:
        return null
    endif

    # Validate the value's type
    if type == 'boolean':
        if value != true && value != 1 && value != false && value != 0:
            systemLogDebug('MarkdownUp: Invalid value ' + jsonStringify(value) + ' for URL argument "' + global + '"')
            value = null
        endif
    elif type == 'date':
        if stringLength(value) != null:
            valueDatetime = datetimeISOParse(value)
            if valueDatetime != null:
                value = datetimeNewUTC(datetimeYear(valueDatetime), datetimeMonth(valueDatetime), datetimeDay(valueDatetime))
            else:
                systemLogDebug('MarkdownUp: Invalid value ' + jsonStringify(value) + ' for URL argument "' + global + '"')
                value = null
            endif
        else:
            value = null
        endif
    elif type == 'datetime':
        if stringLength(value) != null:
            valueDatetime = datetimeISOParse(value)
            if valueDatetime != null:
                value = valueDatetime
            else:
                systemLogDebug('MarkdownUp: Invalid value ' + jsonStringify(value) + ' for URL argument "' + global + '"')
                value = null
            endif
        else:
            value = null
        endif
    elif type == 'number':
        if numberToFixed(value) == null:
            systemLogDebug('MarkdownUp: Invalid value ' + jsonStringify(value) + ' for URL argument "' + global + '"')
            value = null
        endif
    else:
        # type == 'string'
        if stringLength(value) == null:
            systemLogDebug('MarkdownUp: Invalid value ' + jsonStringify(value) + ' for URL argument "' + global + '"')
            value = null
        endif
    endif

    return value
endfunction
